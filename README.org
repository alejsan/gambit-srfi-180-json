An implementation of [[https://srfi.schemers.org/srfi-180/][SRFI 180]]: JSON for [[http://www.gambitscheme.org/][gambit]].

* Work In Progess

** Implemented

- json-generator
- json-fold
- json-read
- json-accumulator
- json-write

** todo

- json-lines-read and json-sequence-read not yet implemented
- Use gambit specific unsafe primitives where possible
- Maybe add options to insert a replacement character when an escaped unpaired
  surrogate is read and for handling byte order mark
- Maybe a pretty-print procedure

* Tests

The json files used for testing are from [[https://github.com/nst/JSONTestSuite/][JSONTestSuite]].

* Extensions to the SRFI

** json-accumulator

The port-or-accumulator argument to json-accumulator is optional and defaults to
the value returned by current-output-port.

** json-error objects have additional fields

#+begin_src scheme
(json-error-irritants obj)
#+end_src

Returns the (possibly empty) list of irritants associated with the json-error
object.

#+begin_src scheme
(json-error-source-or-sink obj)
#+end_src

Returns the port, generator, or accumulator associated with the json-error
object.

* Implementation Notes

** Encoding

If the contents of the supplied input port cannot be decoded, using that port's
encoding, a json-error is raised.

The test suite is run using UTF-8 encoding for every test file.

** Byte order mark

Currently there is no special handling for a leading byte order mark, so it
triggers an error. Unless the port's encoding is set to UTF-16 in which case
gambit's read/peek-char interprets the byte order mark (and configures the port
accordingly) without emitting the BOM.

** Json strings containing escaped unpaired surrogates

Gambit strings cannot contain unpaired surrogates so a json-error is raised when
encountered.

** Very large numbers

Some grammatically valid inputs may cause gambit to perform expensive bignum
operations possibly using all available memory. The test data includes one such
file "i_number_huge_exp.json" (the test case is commented out).

Should there be a way to mitigate this risk?
